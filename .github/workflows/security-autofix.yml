name: security-autofix

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  SECURITY_AUTOFIX: ${{ vars.SECURITY_AUTOFIX || '1' }}
  BANDIT_PATHS: app
  BANDIT_EXCLUDE: tests

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: security-autofix-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    if: ${{ env.SECURITY_AUTOFIX != '0' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine base branch
        id: base
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "base=${{ github.event.pull_request.base.ref }}" >>"$GITHUB_OUTPUT"
            echo "checkout_ref=${{ github.event.pull_request.head.sha }}" >>"$GITHUB_OUTPUT"
          else
            echo "base=${{ github.ref_name }}" >>"$GITHUB_OUTPUT"
            echo "checkout_ref=${{ github.ref }}" >>"$GITHUB_OUTPUT"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.base.outputs.checkout_ref }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install \
            bandit \
            isort \
            mypy \
            pytest \
            pip-audit

      - name: Bandit (pre-fix)
        run: |
          bandit -r "$BANDIT_PATHS" -x "$BANDIT_EXCLUDE" -f json -o bandit.before.json || true

      - name: Run security autofix
        id: autofix
        run: |
          python scripts/security_autofix.py \
            --bandit-report bandit.before.json \
            --apply \
            --summary autofix_summary.json \
            --report-markdown autofix_summary.md

      - name: Detect changes
        id: detect
        run: |
          if [ ! -f autofix_summary.json ]; then
            echo "has_changes=false" >>"$GITHUB_OUTPUT"
            echo "auto_merge=false" >>"$GITHUB_OUTPUT"
            echo "requires_review=false" >>"$GITHUB_OUTPUT"
            exit 0
          fi
          CHANGED=$(jq -r '.changed_files | length' autofix_summary.json)
          AUTO=$(jq -r '.auto_merge_recommended' autofix_summary.json)
          REVIEW=$(jq -r '.requires_manual_review' autofix_summary.json)
          RULES=$(jq -r '.rule_ids | join(", ")' autofix_summary.json)
          echo "rule_list=${RULES}" >>"$GITHUB_OUTPUT"
          if [ "$CHANGED" = "0" ]; then
            echo "has_changes=false" >>"$GITHUB_OUTPUT"
          else
            echo "has_changes=true" >>"$GITHUB_OUTPUT"
          fi
          echo "auto_merge=${AUTO}" >>"$GITHUB_OUTPUT"
          echo "requires_review=${REVIEW}" >>"$GITHUB_OUTPUT"

      - name: Upload pre-fix artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-autofix-pre
          path: |
            bandit.before.json
            autofix_summary.json
            autofix_summary.md
          if-no-files-found: ignore
          retention-days: 7

      - name: Run Isort
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        run: isort --check-only .

      - name: Run Mypy
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        run: mypy app

      - name: Run Pytest
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        env:
          PYTEST_ADDOPTS: "-m 'not postgres'"
        run: pytest -q

      - name: Run pip-audit
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        run: pip-audit -r requirements.txt

      - name: Bandit (post-fix)
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        run: |
          bandit -r "$BANDIT_PATHS" -x "$BANDIT_EXCLUDE" -f json -o bandit.after.json || true

      - name: Upload post-fix artifacts
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: security-autofix-post
          path: |
            bandit.after.json
            autofix_summary.json
            autofix_summary.md
          retention-days: 7

      - name: Prepare PR content
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        id: prep
        run: |
          RULE_ID=$(jq -r '.rule_ids | if length == 0 then "noop" elif length == 1 then .[0] else "multi" end' autofix_summary.json)
          COMMIT_MSG="security(autofix): ${RULE_ID,,} remediation [skip-changelog]"
          TITLE_RULES=$(jq -r '.rule_ids | if length == 0 then "noop" else join(", ") end' autofix_summary.json)
          echo "commit_message=${COMMIT_MSG}" >>"$GITHUB_OUTPUT"
          echo "title_rules=${TITLE_RULES}" >>"$GITHUB_OUTPUT"
          echo "auto_merge=${{ steps.detect.outputs.auto_merge }}" >>"$GITHUB_OUTPUT"
          echo "requires_review=${{ steps.detect.outputs.requires_review }}" >>"$GITHUB_OUTPUT"
          {
            echo "## Summary"
            echo
            cat autofix_summary.md
            echo
            echo "## Checks"
            echo
            echo "- Isort ✅"
            echo "- Mypy ✅"
            echo "- Pytest ✅"
            echo "- pip-audit ✅"
            echo "- Bandit ✅"
          } > SECURITY_AUTOFIX_PR.md

      - name: Create pull request
        if: ${{ steps.detect.outputs.has_changes == 'true' }}
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ${{ steps.prep.outputs.commit_message }}
          branch: security/autofix-${{ github.run_id }}-${{ github.run_attempt }}
          base: ${{ steps.base.outputs.base }}
          title: "[CODX-SEC-AUTOFIX-001] security autofix (${ steps.prep.outputs.title_rules })"
          body-path: SECURITY_AUTOFIX_PR.md
          labels: security-autofix
          signoff: false

      - name: Apply review labels / auto-merge
        if: ${{ steps.detect.outputs.has_changes == 'true' && steps.cpr.outputs.pull-request-number != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.cpr.outputs.pull-request-number }}
          AUTO_MERGE: ${{ steps.detect.outputs.auto_merge }}
          REQUIRES_REVIEW: ${{ steps.detect.outputs.requires_review }}
        run: |
          if [ "$REQUIRES_REVIEW" = "true" ]; then
            gh pr edit "$PR_NUMBER" --add-label "needs-security-review"
          fi
          if [ "$AUTO_MERGE" = "true" ]; then
            gh pr merge "$PR_NUMBER" --auto --squash --delete-branch
          fi
