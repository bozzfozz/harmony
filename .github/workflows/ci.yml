name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  detect-frontend:
    name: detect-frontend
    runs-on: ubuntu-latest
    outputs:
      has_frontend: ${{ steps.check.outputs.has_frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect frontend workspace
        id: check
        run: |
          if [ -f frontend/package.json ]; then
            echo "has_frontend=true" >>"$GITHUB_OUTPUT"
          else
            echo "has_frontend=false" >>"$GITHUB_OUTPUT"
          fi

  tests:
    name: tests
    runs-on: ubuntu-latest
    env:
      RUN_POSTGRES_TESTS: "0"
      PYTHON_VERSION: "3.11"
      COVERAGE_XML: reports/coverage.xml
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml

      - name: Install backend tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install \
            isort \
            mypy \
            pytest-cov

      - name: Mypy (static typing)
        run: mypy app

      - name: Isort (imports)
        run: isort --check-only .

      - name: Pytest (unit + coverage)
        env:
          PYTEST_ADDOPTS: "-m 'not postgres' -r s"
        run: |
          mkdir -p "$(dirname "$COVERAGE_XML")"
          pytest \
            -q \
            --junitxml=reports/junit.xml \
            --cov=app \
            --cov-report=xml:"$COVERAGE_XML" \
            --cov-report=term

      - name: pip-audit (dependencies)
        run: pip-audit -r requirements.txt

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/
          retention-days: 7

  ci-frontend:
    name: ci-frontend
    runs-on: ubuntu-latest
    needs:
      - detect-frontend
      - tests
    if: ${{ needs.detect-frontend.outputs.has_frontend == 'true' }}
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm ci --no-audit --no-fund

      - name: ESLint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Test
        run: npm test -- --runInBand

  diff-coverage:
    name: diff-coverage
    runs-on: ubuntu-latest
    needs:
      - tests
    if: ${{ needs.tests.result == 'success' && github.event.pull_request.head.repo.fork != true }}
    env:
      PYTHON_VERSION: "3.11"
      COVERAGE_XML: reports/coverage.xml
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install diff coverage tooling
        run: |
          python -m pip install --upgrade pip
          pip install diff-cover==9.2.0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          path: .

      - name: Fetch base branch
        run: |
          if [ -n "${{ github.base_ref }}" ]; then
            git fetch origin ${{ github.base_ref }} --depth=1
          else
            git fetch origin main --depth=1 || true
          fi

      - name: Diff coverage gate
        env:
          DIFF_COVER_COMPARE_BRANCH: ${{ github.base_ref != '' && format('origin/{0}', github.base_ref) || 'origin/main' }}
        run: |
          if [ ! -f "$COVERAGE_XML" ]; then
            echo "::error::Expected coverage report missing at $COVERAGE_XML. Did the tests job upload the artifact?"
            exit 1
          fi
          python scripts/run_diff_coverage_gate.py

      - name: Upload diff coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diff-coverage-report
          path: reports/diff_coverage.txt
          retention-days: 7
