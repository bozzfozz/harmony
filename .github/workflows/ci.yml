name: CI

on:
  push:
    branches:
      - main
      - feature/**
      - fix/**
      - chore/**
      - ci/**
  pull_request:

jobs:
  sqlite-guard:
    uses: ./.github/workflows/sqlite-guard.yml

  backend:
    needs: sqlite-guard
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: harmony
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/harmony
      PGPASSWORD: postgres
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install black==24.8.0 ruff==0.12.11 isort==5.13.2 mypy
      - name: Wait for database
        run: |
          for attempt in {1..30}; do
            if pg_isready --host=localhost --port=5432 --username=postgres; then
              exit 0
            fi
            sleep 1
          done
          exit 1
      - name: Alembic upgrade
        run: alembic upgrade head
      - name: Wiring audit
        run: python scripts/audit_wiring.py
      - name: Ruff (lint + import order)
        run: ruff check .
      - name: Black
        run: black --check .
      - name: Isort
        run: isort --check-only .
      - name: Mypy
        run: mypy app
      - name: Pytest
        run: pytest -q
      - name: Alembic downgrade
        run: alembic downgrade base
      - name: pip-audit (advisories only)
        run: pip-audit -r requirements.txt || true
      - name: Radon
        run: radon cc -s -a app
      - name: Vulture
        run: vulture app tests --exclude .venv

  frontend:
    needs: sqlite-guard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - name: Configure npm registry
        working-directory: frontend
        run: npm config set registry https://registry.npmjs.org/
      - name: Clean npm cache
        working-directory: frontend
        run: npm cache clean --force
      - name: Verify npm cache
        working-directory: frontend
        run: npm cache verify
      - name: Install dependencies
        working-directory: frontend
        run: npm ci --no-audit --no-fund
      - name: Lint
        working-directory: frontend
        run: npm run lint
      - name: Test
        working-directory: frontend
        run: npm test -- --runInBand
      - name: Typecheck
        working-directory: frontend
        run: npm run typecheck
      - name: Build
        working-directory: frontend
        run: npm run build

  openapi:
    needs: sqlite-guard
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: harmony
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      # Keep this DSN in sync with other jobs so app settings load during OpenAPI generation.
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/harmony
      PGPASSWORD: postgres
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Wait for database
        run: |
          for attempt in {1..30}; do
            if pg_isready --host=localhost --port=5432 --username=postgres; then
              exit 0
            fi
            sleep 1
          done
          exit 1
      - name: Validate OpenAPI snapshot
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          export DATABASE_URL="${DATABASE_URL}"
          python - <<'PY'
          import json
          from pathlib import Path

          from app.main import app

          snapshot_path = Path('tests/snapshots/openapi.json')
          current_schema = app.openapi()
          snapshot_schema = json.loads(snapshot_path.read_text())
          if current_schema != snapshot_schema:
              raise SystemExit('OpenAPI schema drift detected. Update tests/snapshots/openapi.json')
          PY

