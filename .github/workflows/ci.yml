name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  detect-frontend:
    name: detect-frontend
    runs-on: ubuntu-latest
    outputs:
      has_frontend: ${{ steps.check.outputs.has_frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect frontend workspace
        id: check
        run: |
          if [ -f frontend/package.json ]; then
            echo "has_frontend=true" >>"$GITHUB_OUTPUT"
          else
            echo "has_frontend=false" >>"$GITHUB_OUTPUT"
          fi

  tests:
    name: tests
    runs-on: ubuntu-latest
    env:
      RUN_POSTGRES_TESTS: "0"
      PYTHON_VERSION: "3.11"
      COVERAGE_XML: reports/coverage.xml
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml

      - name: Install backend tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install \
            isort \
            mypy \
            pytest-cov

      - name: Mypy (static typing)
        run: mypy app

      - name: Isort (imports)
        run: isort --check-only .

      - name: Pytest (unit + coverage)
        env:
          PYTEST_ADDOPTS: "-m 'not postgres' -r s"
        run: |
          mkdir -p "$(dirname "$COVERAGE_XML")"
          pytest \
            -q \
            --junitxml=reports/junit.xml \
            --cov=app \
            --cov-report=xml:"$COVERAGE_XML" \
            --cov-report=term

      - name: pip-audit (dependencies)
        run: pip-audit -r requirements.txt

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/
          retention-days: 7

  legacy-scan:
    name: legacy download_flow scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure legacy download_flow references are absent
        run: |
          if rg -n "\bdownload_flow\b|/download_flow/" --glob '!CHANGELOG*' --glob '!docs/archive/**'; then
            echo "::error::Legacy download_flow references detected. Remove them before merging."
            exit 1
          fi
          echo "No legacy download_flow references found."

  ci-frontend:
    name: ci-frontend
    runs-on: ubuntu-latest
    needs:
      - detect-frontend
      - tests
    if: ${{ needs.detect-frontend.outputs.has_frontend == 'true' }}
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: https://registry.npmjs.org

      - name: Remove existing node_modules
        run: rm -rf node_modules

      - name: Configure deterministic npm install
        run: |
          set -euo pipefail
          tmp_cache="$(mktemp -d)"
          echo "Using ephemeral npm cache at $tmp_cache"
          echo "NPM_CONFIG_CACHE=$tmp_cache" >> "$GITHUB_ENV"
          export NPM_CONFIG_CACHE="$tmp_cache"
          npm config set cache "$tmp_cache"
          npm config set prefer-online true
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 600000
          npm config set fetch-timeout 600000
          npm config set registry https://registry.npmjs.org/

      - name: Install frontend dependencies
        run: |
          set -euo pipefail
          attempts=0
          max_attempts=3
          until [ "$attempts" -ge "$max_attempts" ]; do
            attempts=$((attempts + 1))
            echo "npm ci attempt ${attempts}/${max_attempts}"
            if npm ci --no-audit --no-fund; then
              echo "npm ci completed successfully on attempt ${attempts}."
              break
            fi
            if [ "$attempts" -ge "$max_attempts" ]; then
              echo "::error::npm ci failed after ${max_attempts} attempts."
              exit 1
            fi
            echo "npm ci failed (attempt ${attempts}); cleaning cache and retrying..."
            npm cache clean --force
            sleep 5
          done

      - name: ESLint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Test
        run: npm test -- --runInBand

