name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  detect-frontend:
    name: detect-frontend
    runs-on: ubuntu-latest
    outputs:
      has_frontend: ${{ steps.check.outputs.has_frontend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect frontend workspace
        id: check
        run: |
          if [ -f frontend/package.json ]; then
            echo "has_frontend=true" >>"$GITHUB_OUTPUT"
          else
            echo "has_frontend=false" >>"$GITHUB_OUTPUT"
          fi

  ban_test_flow_prefix:
    name: ban-test-flow-prefix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure legacy test_flow files are absent
        run: |
          set -euo pipefail
          legacy_files=$(git ls-files -- 'tests/**/test_flow*.py')
          if [ -n "$legacy_files" ]; then
            printf 'Legacy test_flow files detected:\n%s\n' "$legacy_files"
            exit 1
          fi

      - name: Ensure legacy test_flow references are absent
        run: |
          set -euo pipefail
          if rg -n '\btest_flow' tests --hidden --no-ignore --glob '!docs/**' --glob '!CHANGELOG*'; then
            echo 'Legacy test_flow references detected'
            exit 1
          fi

  tests:
    name: tests
    runs-on: ubuntu-latest
    needs:
      - ban_test_flow_prefix
    env:
      PYTHON_VERSION: "3.11"
      COVERAGE_XML: reports/coverage.xml
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml

      - name: Install backend tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install \
            mypy \
            pytest-cov \
            ruff

      - name: Startup-Guards (dry-run)
        run: |
          python - <<'PY'
          import os
          import socketserver
          import subprocess
          import sys
          import tempfile
          import threading
          from pathlib import Path

          class _Handler(socketserver.BaseRequestHandler):
              def handle(self) -> None:  # pragma: no cover
                  try:
                      self.request.recv(8)
                  except OSError:
                      return

          class _Server(socketserver.ThreadingMixIn, socketserver.TCPServer):
              allow_reuse_address = True
              daemon_threads = True

          with tempfile.TemporaryDirectory() as tmp_dir:
              tmp_path = Path(tmp_dir)
              downloads = tmp_path / "downloads"
              music = tmp_path / "music"
              oauth_state = tmp_path / "oauth_state"
              downloads.mkdir(parents=True, exist_ok=True)
              music.mkdir(parents=True, exist_ok=True)
              oauth_state.mkdir(parents=True, exist_ok=True)

              server = _Server(("127.0.0.1", 0), _Handler)
              thread = threading.Thread(target=server.serve_forever, daemon=True)
              thread.start()
              host, port = server.server_address

              env = os.environ.copy()
              env.update(
                  {
                      "SPOTIFY_CLIENT_ID": "ci-client",
                      "SPOTIFY_CLIENT_SECRET": "ci-secret",
                      "OAUTH_SPLIT_MODE": "false",
                      "DOWNLOADS_DIR": str(downloads),
                      "MUSIC_DIR": str(music),
                      "OAUTH_STATE_DIR": str(oauth_state),
                      "SLSKD_HOST": host,
                      "SLSKD_PORT": str(port),
                      "HARMONY_API_KEY": "ci-startup-check",
                      "HEALTH_READY_REQUIRE_DB": "false",
                      "HARMONY_API_KEYS": "ci-startup-check",
                  }
              )
              try:
                  subprocess.check_call(
                      [sys.executable, "-m", "app.ops.selfcheck", "--assert-startup"],
                      env=env,
                  )
              finally:
                  server.shutdown()
                  server.server_close()
                  thread.join(timeout=1)
          PY

      - name: Mypy (static typing)
        run: mypy app

      - name: Pytest (unit + coverage)
        run: |
          mkdir -p "$(dirname "$COVERAGE_XML")"
          pytest \
            -q \
            --junitxml=reports/junit.xml \
            --cov=app \
            --cov-report=xml:"$COVERAGE_XML" \
            --cov-report=term

      - name: pip-audit (dependencies)
        run: pip-audit -r requirements.txt

      - name: Ruff Final Check
        run: |
          ruff format --check .
          ruff check --output-format=github .

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/
          retention-days: 7

  legacy-import-ban:
    name: legacy import ban (download_flow)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure legacy orchestrator imports are absent
        run: rg -n "app\.orchestrator\.download_flow" --glob '!docs/archive/**' --glob '!CHANGELOG*' && exit 1 || exit 0

  ci-frontend:
    name: ci-frontend
    runs-on: ubuntu-latest
    needs:
      - detect-frontend
      - tests
    if: ${{ needs.detect-frontend.outputs.has_frontend == 'true' }}
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: https://registry.npmjs.org

      - name: Remove existing node_modules
        run: rm -rf node_modules

      - name: Configure deterministic npm install
        run: |
          set -euo pipefail
          tmp_cache="$(mktemp -d)"
          echo "Using ephemeral npm cache at $tmp_cache"
          echo "NPM_CONFIG_CACHE=$tmp_cache" >> "$GITHUB_ENV"
          export NPM_CONFIG_CACHE="$tmp_cache"
          npm config set cache "$tmp_cache"
          npm config set prefer-online true
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 600000
          npm config set fetch-timeout 600000
          npm config set registry https://registry.npmjs.org/

      - name: Install frontend dependencies
        run: |
          set -euo pipefail
          attempts=0
          max_attempts=3
          until [ "$attempts" -ge "$max_attempts" ]; do
            attempts=$((attempts + 1))
            echo "npm ci attempt ${attempts}/${max_attempts}"
            if npm ci --no-audit --no-fund; then
              echo "npm ci completed successfully on attempt ${attempts}."
              break
            fi
            if [ "$attempts" -ge "$max_attempts" ]; then
              echo "::error::npm ci failed after ${max_attempts} attempts."
              exit 1
            fi
            echo "npm ci failed (attempt ${attempts}); cleaning cache and retrying..."
            npm cache clean --force
            sleep 5
          done

      - name: ESLint
        run: npm run lint

      - name: Build
        id: build
        run: npm run build

      - name: Test
        run: npm test -- --runInBand

      - name: Upload frontend dist artifact
        if: ${{ always() && steps.build.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist
          if-no-files-found: error

