name: docker (linuxserver.io)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: read
  packages: write

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  build-and-publish:
    name: Build & publish docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare metadata
        id: vars
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          set -euo pipefail
          short_sha="${GITHUB_SHA::7}"
          version="sha-${short_sha}"
          build_date="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          push="false"
          ghcr_tags="${REGISTRY_IMAGE}:sha-${short_sha}"
          labels="org.opencontainers.image.title=Harmony\n"
          labels+="org.opencontainers.image.description=Harmony backend service (linuxserver.io base)\n"
          labels+="org.opencontainers.image.source=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}\n"
          labels+="org.opencontainers.image.revision=${GITHUB_SHA}\n"
          labels+="org.opencontainers.image.created=${build_date}\n"
          labels+="org.opencontainers.image.version=${version}"

          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            version="${GITHUB_REF#refs/tags/v}"
            IFS='.' read -r major minor patch <<<"${version}"
            ghcr_tags="${REGISTRY_IMAGE}:v${version}\n${REGISTRY_IMAGE}:v${major}\n${REGISTRY_IMAGE}:latest"
            labels="org.opencontainers.image.title=Harmony\n"
            labels+="org.opencontainers.image.description=Harmony backend service (linuxserver.io base)\n"
            labels+="org.opencontainers.image.source=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}\n"
            labels+="org.opencontainers.image.revision=${GITHUB_SHA}\n"
            labels+="org.opencontainers.image.created=${build_date}\n"
            labels+="org.opencontainers.image.version=${version}"
          elif [[ "${GITHUB_REF}" != refs/heads/main ]]; then
            ghcr_tags="${REGISTRY_IMAGE}:sha-${short_sha}"
          fi

          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            if [[ "${GITHUB_REF}" == refs/heads/main ]] || [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
              push="true"
            fi
          fi

          dockerhub_tags=""
          if [[ -n "${DOCKERHUB_USERNAME}" ]]; then
            dockerhub_repo="docker.io/${DOCKERHUB_USERNAME}/harmony"
            if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
              dockerhub_tags="${dockerhub_repo}:v${version}\n${dockerhub_repo}:v${major}\n${dockerhub_repo}:latest"
            elif [[ "${GITHUB_REF}" == refs/heads/main ]]; then
              dockerhub_tags="${dockerhub_repo}:sha-${short_sha}"
            fi
            if [[ -n "${dockerhub_tags}" ]]; then
              ghcr_tags="${ghcr_tags}\n${dockerhub_tags}"
            fi
          fi

          printf 'push=%s\n' "${push}" >>"${GITHUB_OUTPUT}"
          printf 'version=%s\n' "${version}" >>"${GITHUB_OUTPUT}"
          printf 'build_date=%s\n' "${build_date}" >>"${GITHUB_OUTPUT}"
          printf 'labels=%s\n' "${labels}" >>"${GITHUB_OUTPUT}"
          printf 'tags=%s\n' "${ghcr_tags}" >>"${GITHUB_OUTPUT}"

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.lsio

      - name: Build image for security scan
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.lsio
          load: true
          push: false
          tags: harmony:test
          platforms: linux/amd64
          build-args: |
            APP_VERSION=${{ steps.vars.outputs.version }}
            BUILD_DATE=${{ steps.vars.outputs.build_date }}
            VCS_REF=${{ github.sha }}
            IMAGE_TITLE=Harmony
            IMAGE_DESCRIPTION=Harmony backend service (linuxserver.io base)
            IMAGE_SOURCE=${{ github.server_url }}/${{ github.repository }}

      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: harmony:test
          format: table
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Smoke test container
        run: |
          set -euo pipefail
          docker run -d \
            --name harmony-smoke \
            -e PUID=1000 \
            -e PGID=1000 \
            -e TZ=UTC \
            -e UMASK=022 \
            -p 18080:8000 \
            harmony:test
          cleanup() {
            docker rm -f harmony-smoke >/dev/null 2>&1 || true
          }
          trap cleanup EXIT
          for attempt in $(seq 1 20); do
            if curl -sf http://127.0.0.1:18080/ready >/dev/null; then
              echo "Service is ready"
              break
            fi
            sleep 3
          done
          curl -sf http://127.0.0.1:18080/ready >/dev/null

      - name: Login to GitHub Container Registry
        if: steps.vars.outputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: steps.vars.outputs.push == 'true' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.lsio
          push: ${{ steps.vars.outputs.push }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.vars.outputs.tags }}
          labels: ${{ steps.vars.outputs.labels }}
          build-args: |
            APP_VERSION=${{ steps.vars.outputs.version }}
            BUILD_DATE=${{ steps.vars.outputs.build_date }}
            VCS_REF=${{ github.sha }}
            IMAGE_TITLE=Harmony
            IMAGE_DESCRIPTION=Harmony backend service (linuxserver.io base)
            IMAGE_SOURCE=${{ github.server_url }}/${{ github.repository }}
