name: Nightly

on:
  schedule:
    - cron: "0 23 * * *"
    - cron: "0 0 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  nightly-scan:
    name: security-and-dependency-scan
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.11"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify 01:00 Europe/Berlin window
        id: window
        run: |
          export TZ=Europe/Berlin
          hour=$(date +%H)
          echo "Berlin local hour: $hour"
          if [ "$hour" = "01" ]; then
            echo "run=true" >> "$GITHUB_OUTPUT"
          else
            echo "run=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip outside maintenance window
        if: steps.window.outputs.run != 'true'
        run: echo "Skipping nightly scans outside 01:00 Europe/Berlin." 

      - name: Set up Python
        if: steps.window.outputs.run == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Prepare report directory
        if: steps.window.outputs.run == 'true'
        run: mkdir -p reports/nightly

      - name: Install Python audit tooling
        if: steps.window.outputs.run == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit cyclonedx-bom

      - name: pip-audit (requirements)
        if: steps.window.outputs.run == 'true'
        run: |
          pip-audit -r requirements.txt -f json -o reports/nightly/pip-audit.json || true

      - name: Backend SBOM
        if: steps.window.outputs.run == 'true'
        run: |
          cyclonedx-bom -r requirements.txt -o reports/nightly/backend-sbom.xml

      - name: Set up Node.js
        if: steps.window.outputs.run == 'true' && hashFiles('frontend/package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: https://registry.npmjs.org

      - name: Remove existing node_modules
        if: steps.window.outputs.run == 'true' && hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: rm -rf node_modules

      - name: Configure deterministic npm install
        if: steps.window.outputs.run == 'true' && hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: |
          set -euo pipefail
          tmp_cache="$(mktemp -d)"
          echo "Using ephemeral npm cache at $tmp_cache"
          echo "NPM_CONFIG_CACHE=$tmp_cache" >> "$GITHUB_ENV"
          export NPM_CONFIG_CACHE="$tmp_cache"
          npm config set cache "$tmp_cache"
          npm config set prefer-online true
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 600000
          npm config set fetch-timeout 600000
          npm config set registry https://registry.npmjs.org/

      - name: Install frontend dependencies (audit)
        if: steps.window.outputs.run == 'true' && hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: |
          set -euo pipefail
          attempts=0
          max_attempts=3
          until [ "$attempts" -ge "$max_attempts" ]; do
            attempts=$((attempts + 1))
            echo "npm ci attempt ${attempts}/${max_attempts}"
            if npm ci --no-audit --no-fund; then
              echo "npm ci completed successfully on attempt ${attempts}."
              break
            fi
            if [ "$attempts" -ge "$max_attempts" ]; then
              echo "::error::npm ci failed after ${max_attempts} attempts."
              exit 1
            fi
            echo "npm ci failed (attempt ${attempts}); cleaning cache and retrying..."
            npm cache clean --force
            sleep 5
          done

      - name: npm audit
        if: steps.window.outputs.run == 'true' && hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: |
          npm audit --audit-level=high --json > ../reports/nightly/npm-audit.json || true

      - name: Frontend SBOM
        if: steps.window.outputs.run == 'true' && hashFiles('frontend/package.json') != ''
        working-directory: frontend
        run: |
          npx --yes @cyclonedx/cyclonedx-npm --output-file ../reports/nightly/frontend-sbom.json

      - name: Secret scan (gitleaks)
        if: steps.window.outputs.run == 'true'
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-banner --redact --report-format json --report-path reports/nightly/gitleaks-report.json --exit-code 0

      - name: Upload nightly reports
        if: steps.window.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: nightly-security-reports
          path: reports/nightly
          retention-days: 7
