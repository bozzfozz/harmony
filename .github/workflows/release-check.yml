name: release-check

on:
  push:
    branches:
      - 'release/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'release/**'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: release-check-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  gate:
    name: release-check
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "0.7.0"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Verify uv lockfile
        run: uv lock --check

      - name: Install dependencies
        run: |
          uv sync --group dev --group test

      - name: Run pytest (verbose)
        env:
          SLSKD_API_KEY: release-check-ci
          HARMONY_API_KEYS: ui-smoke-key
        run: |
          set -euo pipefail
          mkdir -p reports/release-check
          uv run --no-sync --group dev --group test pytest -vv --maxfail=1 --disable-warnings 2>&1 | tee reports/release-check/pytest-output.txt

      - name: Upload pytest log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-log
          path: reports/release-check/pytest-output.txt
          if-no-files-found: warn

      - name: Run make release-check
        env:
          SLSKD_API_KEY: release-check-ci
          HARMONY_API_KEYS: ui-smoke-key
          RELEASE_CHECK_COMMANDS: |
            make fmt
            make lint
            make dep-sync
            make supply-guard
            make smoke
            make docs-verify
            make pip-audit
            make ui-smoke
        run: |
          set -euo pipefail
          mkdir -p reports/release-check
          uv run --no-sync --group dev --group test make release-check |& tee reports/release-check/release-check.log
          git diff --exit-code

      - name: Check FastAPI/Starlette compatibility window
        run: |
          set -euo pipefail
          uv run --no-sync --group dev --group test python - <<'PY'
import sys

try:
    import fastapi  # noqa: F401
    import starlette
except Exception as exc:  # pragma: no cover - executed in CI
    print(f"compat_check: import failed: {exc}")
    sys.exit(0)

from packaging.version import Version

if Version(starlette.__version__) >= Version("0.49.1"):
    print("compat_check: Starlette fix vorhanden â€“ pip-audit Ignore kann entfernt werden.")
    sys.exit(1)

print(
    "compat_check: Starlette < 0.49.1; pip-audit Ignore weiterhin erforderlich.",
)
PY

      - name: Verify packaging pipeline
        run: |
          set -euo pipefail
          uv run --no-sync --group dev --group test make package-verify

      - name: Upload packaging artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-packaging-artifacts
          path: dist/
          if-no-files-found: warn

      - name: Upload release-check logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-check-logs
          path: reports/release-check/
          if-no-files-found: warn
